// PROBLEM: Level order traversal

// Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.

// Examples:

// Input: root[] = [1, 2, 3]
// Output: [[1], [2, 3]]

// Input: root[] = [10, 20, 30, 40, 50]
// Output: [[10], [20, 30], [40, 50]]

// Input: root[] = [1, 3, 2, N, N, N, 4, 6, 5]
// Output: [[1], [3, 2], [4], [6, 5]]

// Constraints:
// 1 ≤ number of nodes ≤ 105
// 0 ≤ node->data ≤ 109

// SOLUTION :

class Solution {
  public:
    vector<vector<int>> levelOrder(Node *root) {
        // Your code here
        vector<vector<int >> result;
        
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty()){
            int size = q.size();
            vector<int> level;
            
            for(int i=0; i<size; i++){
                Node* node = q.front();
                q.pop();
                level.push_back(node->data);
                
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            result.push_back(level);
        }
        return result;
    }
};
